# (№ 1716) Автомат получает на вход трёхзначное число. По этому числу строится новое число по следующим правилам.
# 1. Из цифр, образующих десятичную запись N, строятся наибольшее и наименьшее возможные двузначные числа (числа не могут начинаться с нуля).
# 2. На экран выводится разность полученных двузначных чисел.
# Пример. Дано число N = 351. Наибольшее двузначное число из заданных цифр – 53, наименьшее – 13. На экран выводится разность 53 – 13 = 40.
# Чему равно количество чисел N на отрезке [900; 999], в результате обработки которых на экране автомата появится число 70?

def getNumList(N: int): # функция возвращает список из цифр нашего числа. Здесь я явно указываю , что наш параметр должен быть вида int
    # чтобы Python ругался, если мы будем туда что-то другое подставлять - удобно

    d1 = N // 100 # первая цифра в числе - количество сотен
    d2 = N // 10 % 10 # вторая цифра в числе - сколько остается десятков
    d3 = N % 10 # третья №3 в числе 

    return [d1,d2,d3] # возвращяем список, в котором наши цифры. Пример: N = 347, вернем список [3,4,7]
    

def max2(N : int):
    # находим наибольшее возможное двузначное число для трехзначного N 
    numList = getNumList(N) # получим список из цифр
    numList.sort() # отсортируем, пример numList = [7,4,6]. после numList.sort() он будет [4,6,7]
    
    # максимально возможное число из двух цифр = последняя цифра из списка и предпоследняя
    # пример numList после сортировки [4,6,7], значит максимальное число можно сделать из двух цифр = 76
    # надо взять последнюю цифра из списка, потом предпоследнюю и соединить вместе.
    # мы можем потом обратиться к конкретному элементу списка по его номеру, начиная с 0: numList[0] вернет нам 4,
    # а numList[1] вернет 6 и т.д.

    # способ № 1:
    # т.к. в списке хранятся числа, а не строки, то пойдем математическим путем:
    # чтобы из цифры 7 и из цифры 6 получить 76 надо 7 * 10 и прибавить 6 = 7(нулевая цифра) * 10 + 6 (первая цифра)
    # т.к. в списке numList 7 находится по индексу 2, а 6 по индексу 1 делаем следующее:
    toReturn1 = numList[2] * 10 + numList[1]

    # способ № 2:
    # получим из списка наши цифры, преобразуем их в строки и склеим
    toReturn2 = str(numList[2]) + str(numList[1])

    return toReturn1  # в программе оставить нужно будет либо способ №1, либо способ №2, потому как в данном случае 
    # мы возвращаем toReturn1, а toReturn2 вообще не используем и вычислять его не нужно


def min2(N : int):
    # находим наименьшее возможное двузначное число для трехзначного N 
    numList = getNumList(N) # получим список из цифр
    numList.sort() # отсортируем, пример numList = [7,4,6]. после numList.sort() он будет [4,6,7]
    
    # наименьшее возможное число из двух цифр = первая цифра (но индекс у нее == 0) из списка и вторая (индекс == 1, т.к. считаем всегда от 0)
    # пример numList после сортировки [4,6,7], значит наименьшее число можно сделать из двух цифр = 46
    # надо взять нулевую цифру из списка, потом первую и соединить вместе.
    # мы можем потом обратиться к конкретному элементу списка по его номеру, начиная с 0: numList[0] вернет нам 4,
    # а numList[1] вернет 6 и т.д.
    # но не забываем, что по условию задачи, число не может начинаться с нуля, тогда для N = 307 список будет отсортирован как numList = [0,3,7]
    # и нам нужно получить минимальное число из двух цифр = 30. Видно, что нужно взять и поменять цифры в числе местами: вместо 03 делаем 30
    # 

    # способ № 1:
    # т.к. в списке хранятся числа, а не строки, то пойдем математическим путем:
    if numList[0] == 0: # если самая первая(нулевая по индексу) цифра в списке == 0, то делаем следующее
        toReturn1 = numList[1] * 10 + numList[0] # numList = [0,3,7], возмьем сначала 3(первый индекс в списке у цифры) и умножим на 10 и прибавим 0 (нулевой индекс в списке), чтобы получить 30
    else: # если
        toReturn1 = numList[0] * 10 + numList[1] # numList = [4,6,7], тогда 4(нулевой индекс) * 10 + 6 (первый индекс в списке numList)

    # способ № 2:
    # получим из списка наши цифры, преобразуем их в строки и склеим
    if numList[0] == 0: # если самая первая(нулевая по индексу) цифра в списке == 0, то делаем следующее
        toReturn2 = str(numList[1]) + str(numList[0]) # сначала берем первый индекс, потом второй как в способе № 1
    else:
        toReturn2 = str(numList[0]) + str(numList[1]) # аналогично способу #1, только работает со строками

    return toReturn1  # в программе оставить нужно будет либо способ №1, либо способ №2, потому как в данном случае 
    # мы возвращаем toReturn1, а toReturn2 вообще не используем и вычислять его не нужно

def f(N : int): # найдем для нашего N разность между максимально возможным числом и минимально возможным
    return max2(N) - min2(N) 

N = 307
print(N) # сделаем проверку
print(max2(N), 73, max2(N) == 73)    # выведем результат нахождения нашей функцией максимально возможного числа из двух цифр, потом выведем то, что должно получиться, потом результат сравнения
print(min2(N), 30, min2(N) == 30)    # выведем результат нахождения нашей функцией минимально возможного числа из двух цифр, потом выведем то, что должно получиться, потом результат сравнения
print(f(N), 43, f(N) == 43)          # выведем результат нахождения нашей функцией разницы между максимум и минимумом, а также посчитаный вручную результат и сравнение 

# проверим для другого числа
N = 746
print(N)
print(max2(N), 76, max2(N) == 76) # выведем результат нахождения нашей функцией максимально возможного числа из двух цифр, потом выведем то, что должно получиться, потом результат сравнения
print(min2(N), 46, min2(N) == 46) # выведем результат нахождения нашей функцией минимально возможного числа из двух цифр, потом выведем то, что должно получиться, потом результат сравнения
print(f(N), 30, f(N) == 30)       # выведем результат нахождения нашей функцией разницы между максимум и минимумом, а также посчитаный вручную результат и сравнение 

# если на экране будут одни True, то все наши функции работают исправно, можно запускать алгоритм нахождения количества таких чисел, у которых разница будет == 70, то есть f(N) должен возвращать 70


######
##  вот тут начинается уже наша программа
######

count = 0 # здесь будем хранить количество найденых чисел, у которых в результате будет разность 70 после запуска алгоритма
for N in range(900,1000): # работаем по отрезку [900,999]
    if f(N) == 70: # если получилась разница 70, то увеличим счетчик
        count += 1

print(f"В результате мы нашли: {count} чисел") # теперь выведем значение нашего счетчик





 


